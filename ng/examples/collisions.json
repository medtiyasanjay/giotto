{"title": "Collision Detection", "name": "collisions", "content_type": "text/html", "image": "http://giottojs.org/examples/collisions/collision.svg", "html": {"main": "<div id=\"page-main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-sm-12\" data-highlight>\n<div class=\"page-header\">\n<h2>Collision Detection</h2>\n</div>\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-sm-10\">\n      <div data-options=\"gexamples.force1\" style=\"width: 100%;\" giotto-force></div>\n    </div>\n    <div class=\"col-sm-2 small\">\n     <div data-jstats></div>\n      <lux-form data-options='luxforms.collision_aogu1'><script>if (!this.luxforms) {this.luxforms = {};} this.luxforms.collision_aogu1 = {\"field\": {\"id\": \"collision_aogu1\", \"type\": \"form\", \"model\": \"Collision\"}, \"children\": [{\"field\": {\"type\": \"fieldset\"}, \"children\": [{\"field\": {\"required\": true, \"value\": \"svg\", \"options\": [\"svg\", \"canvas\"], \"type\": \"select\", \"name\": \"type\"}}, {\"field\": {\"min\": 0, \"max\": 1, \"type\": \"number\", \"name\": \"gravity\", \"required\": true, \"value\": 0.05}}, {\"field\": {\"required\": true, \"name\": \"charge\", \"type\": \"number\", \"value\": -0.02}}, {\"field\": {\"min\": 0, \"max\": 1, \"type\": \"number\", \"name\": \"friction\", \"required\": true, \"value\": 0.9}}]}]};</script></lux-form>\n    </div>\n  </div>\n</div>\n<h3>Javascript code</h3>\n<pre><code>gexamples.force1 = {\n    margin: {top:0, left:0, right:0, bottom:0},\n    nodes: 150,\n    minRadius: 0.005,\n    maxRadius: 0.02,\n    gravity: 0.05,\n    charge: -0.02,\n\n    height: '60%',\n\n    model: 'CollisionFormModel',\n\n    point: {\n        color: '#555',\n        width: 1,\n        fillOpacity: 1\n    },\n\n    onInit: function (force) {\n\n        var opts = force.options(),\n            root = {fixed: true, radius: 0, x: -1, y: -1},\n            paper = force.paper(),\n            charge = force.charge();\n\n        // Add nodes\n        force.nodes(d3.range(+opts.nodes).map(function() {\n            var minRadius = +opts.minRadius,\n                maxRadius = +opts.maxRadius,\n                dr = maxRadius &gt; minRadius ? maxRadius - minRadius : 0;\n            return {radius: paper.dim(Math.random() * dr + minRadius)};\n        })).addNode(root);\n\n        if (typeof charge !== 'function')\n            force.charge(opts._charge(charge));\n\n        //force.drawQuadTree();\n        force.drawPoints();\n\n        paper.on(\"mousemove\", function() {\n            var p1 = d3.mouse(this);\n            root.x = paper.xfromPX(p1[0]);\n            root.y = paper.yfromPX(p1[1]);\n            force.resume();\n        }).on(\"touchmove\", function() {\n            var p1 = d3.touches(this);\n            root.x = paper.xfromPX(p1[0][0]);\n            root.y = paper.yfromPX(p1[0][1]);\n            force.resume();\n        });\n\n        force.on(\"tick\", function(e) {\n            force.collide();\n            paper.render();\n        });\n    },\n\n    // Callback when angular directive\n    angular: function (force, opts) {\n\n        opts.scope.$on('formFieldChange', function (e, model) {\n            var value = model.form[model.field];\n\n            if (model.field === 'friction' &amp;&amp; value)\n                force.friction(value);\n            else if (model.field === 'gravity')\n                force.gravity(value);\n            else if (model.field === 'charge')\n                force.charge(opts._charge(value));\n            else if (model.field === 'type') {\n                // rebuild paper\n                opts.type = value;\n                force.paper(true);\n                opts.onInit(force);\n            }\n            force.resume();\n        });\n\n    },\n\n    _charge: function (value) {\n        return function (d) {\n            return d.fixed ? value : 0;\n        };\n    }\n};\n</code></pre>\n</div>\n</div>\n</div>\n</div>\n<script>\n\n    gexamples.force1 = {\n        margin: {top:0, left:0, right:0, bottom:0},\n        nodes: 150,\n        minRadius: 0.005,\n        maxRadius: 0.02,\n        gravity: 0.05,\n        charge: -0.02,\n\n        height: '60%',\n\n        model: 'CollisionFormModel',\n\n        point: {\n            color: '#555',\n            width: 1,\n            fillOpacity: 1\n        },\n\n        onInit: function (force) {\n\n            var opts = force.options(),\n                root = {fixed: true, radius: 0, x: -1, y: -1},\n                paper = force.paper(),\n                charge = force.charge();\n\n            // Add nodes\n            force.nodes(d3.range(+opts.nodes).map(function() {\n                var minRadius = +opts.minRadius,\n                    maxRadius = +opts.maxRadius,\n                    dr = maxRadius > minRadius ? maxRadius - minRadius : 0;\n                return {radius: paper.dim(Math.random() * dr + minRadius)};\n            })).addNode(root);\n\n            if (typeof charge !== 'function')\n                force.charge(opts._charge(charge));\n\n            //force.drawQuadTree();\n            force.drawPoints();\n\n            paper.on(\"mousemove\", function() {\n                var p1 = d3.mouse(this);\n                root.x = paper.xfromPX(p1[0]);\n                root.y = paper.yfromPX(p1[1]);\n                force.resume();\n            }).on(\"touchmove\", function() {\n                var p1 = d3.touches(this);\n                root.x = paper.xfromPX(p1[0][0]);\n                root.y = paper.yfromPX(p1[0][1]);\n                force.resume();\n            });\n\n            force.on(\"tick\", function(e) {\n                force.collide();\n                paper.render();\n            });\n        },\n\n        // Callback when angular directive\n        angular: function (force, opts) {\n\n            opts.scope.$on('formFieldChange', function (e, model) {\n                var value = model.form[model.field];\n\n                if (model.field === 'friction' && value)\n                    force.friction(value);\n                else if (model.field === 'gravity')\n                    force.gravity(value);\n                else if (model.field === 'charge')\n                    force.charge(opts._charge(value));\n                else if (model.field === 'type') {\n                    // rebuild paper\n                    opts.type = value;\n                    force.paper(true);\n                    opts.onInit(force);\n                }\n                force.resume();\n            });\n\n        },\n\n        _charge: function (value) {\n            return function (d) {\n                return d.fixed ? value : 0;\n            };\n        }\n    };\n</script>\n<div id=\"footer\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-sm-12 small\">\n<p>Library released under the <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD License</a>.</p>\n<p>Copyright 2014 <a href=\"http://lucasbardella.com\">Luca Sbardella</a> and <a href=\"http://quantmind.com\">Quantmind</a></p>\n</div>\n</div>\n</div>\n</div>\n"}, "slug": "collisions", "date": "2014-11-28T00:00:00", "api_url": "http://giottojs.org/ng/examples/collisions.json", "site": {"url": "http://giottojs.org", "python_version": "3.4.2", "date": "2014-12-18T11-57-52", "name": "Lux", "lux_version": "0.1.2-alpha.1", "year": 2014, "media": "/media", "template": "partials/examples.html", "template_engine": null}, "modified": "2014-12-08T08:41:10", "description": "A list of GiottoJS examples", "head": {"description": "A list of GiottoJS examples", "title": "Collision Detection", "twitter:card": "summary_large_image"}, "html_url": "http://giottojs.org/examples/collisions"}