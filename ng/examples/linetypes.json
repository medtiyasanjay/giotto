{"site": {"year": 2014, "media": "/media", "python_version": "3.4.2", "date": "2014-12-11T22-59-42", "template_engine": null, "url": "http://quantmind.github.io/giotto", "template": "examples.md", "name": "Lux", "lux_version": "0.1.2-alpha.1"}, "title": "Lines and Symbols", "slug": "linetypes", "name": "linetypes", "content_type": "text/html", "html": {"main": "<h3 class=\"text-center\">Lines and Symbols</h3>\n\n<div class=\"text-center\"><lux-form data-options='luxforms.linetypeform_6KVdC'><script>if (!this.luxforms) {this.luxforms = {};} this.luxforms.linetypeform_6KVdC = {\"field\": {\"id\": \"linetypeform_6KVdC\", \"type\": \"form\", \"showLabels\": false, \"layout\": \"inline\", \"model\": \"LineTypeForm\"}, \"children\": [{\"field\": {\"type\": \"fieldset\"}, \"children\": [{\"field\": {\"options\": [\"svg\", \"canvas\"], \"type\": \"select\", \"required\": true, \"value\": \"svg\", \"name\": \"type\"}}, {\"field\": {\"options\": [\"linear\", \"linear-closed\", \"step\", \"step-before\", \"step-after\", \"basis\", \"basis-open\", \"basis-closed\", \"bundle\", \"cardinal\", \"cardinal-open\", \"cardinal-closed\", \"monotone\"], \"type\": \"select\", \"required\": true, \"value\": \"linear\", \"name\": \"interpolate\"}}, {\"field\": {\"options\": [\"circle\", \"cross\", \"diamond\", \"square\", \"triangle-down\", \"triangle-up\"], \"type\": \"select\", \"required\": true, \"value\": \"circle\", \"name\": \"symbol\"}}]}]};</script></lux-form></div>\n\n<div data-options='gexamples.linetypes' style='max-width: 700px' class=\"center-block\" giotto-chart></div>\n\n<script>\n\n    gexamples.linetypes = {\n        height: '70%',\n\n        point: {\n            show: true,\n            lineWidth: 3,\n            fill: '#fff',\n            size: '12px'\n        },\n\n        line: {\n            show: true,\n            interpolate: 'linear',\n            lineWidth: 3\n        },\n\n        grid: {\n            show: true,\n            color: '#000'\n        },\n\n        data: function () {\n            return [randomPath(0.2, 0.3)];\n        },\n\n        // Callback for angular directive\n        angular: function (chart, opts) {\n\n            function update (form) {\n                angular.forEach(form, function (value, name) {\n                    if (name === 'type')\n                        opts.type = value;\n                    else if (name === 'interpolate')\n                        chart.setSerieOption('line', name, value);\n                    else\n                        chart.setSerieOption('point', name, value);\n                });\n                chart.resume();\n            }\n\n            opts.scope.$on('formReady', function (e, form) {\n                update(form);\n            });\n            opts.scope.$on('formFieldChange', function (e, form) {\n                update(form);\n            });\n        }\n    };\n\n    function randomPath (\u00b5, \u03c3) {\n        // Create a random path\n        var t = d3.range(0, 5, 0.5),\n            data = [{x: t[0], y: 1}],\n            norm = d3.random.normal(0, 1),\n            dt, dy;\n\n        for(var i=1; i<t.length; i++) {\n            dt = t[i] - t[i-1];\n            dy = dt*\u00b5 + \u03c3*norm()*Math.sqrt(dt);\n            data[i] = {x: t[i], y: data[i-1].y + dy};\n        }\n        return data;\n    }\n</script>\n\n<p>Javascript code:</p>\n<pre><code>gexamples.linetypes = {\n    height: '70%',\n\n    point: {\n        show: true,\n        lineWidth: 3,\n        fill: '#fff',\n        size: '12px'\n    },\n\n    line: {\n        show: true,\n        interpolate: 'linear',\n        lineWidth: 3\n    },\n\n    grid: {\n        show: true,\n        color: '#000'\n    },\n\n    data: function () {\n        return [randomPath(0.2, 0.3)];\n    },\n\n    // Callback for angular directive\n    angular: function (chart, opts) {\n\n        function update (form) {\n            angular.forEach(form, function (value, name) {\n                if (name === 'type')\n                    opts.type = value;\n                else if (name === 'interpolate')\n                    chart.setSerieOption('line', name, value);\n                else\n                    chart.setSerieOption('point', name, value);\n            });\n            chart.resume();\n        }\n\n        opts.scope.$on('formReady', function (e, form) {\n            update(form);\n        });\n        opts.scope.$on('formFieldChange', function (e, form) {\n            update(form);\n        });\n    }\n};\n\nfunction randomPath (\u00b5, \u03c3) {\n    // Create a random path\n    var t = d3.range(0, 5, 0.5),\n        data = [{x: t[0], y: 1}],\n        norm = d3.random.normal(0, 1),\n        dt, dy;\n\n    for(var i=1; i&lt;t.length; i++) {\n        dt = t[i] - t[i-1];\n        dy = dt*\u00b5 + \u03c3*norm()*Math.sqrt(dt);\n        data[i] = {x: t[i], y: data[i-1].y + dy};\n    }\n    return data;\n}\n</code></pre>"}, "head": {"title": "Lines and Symbols", "twitter:card": "summary_large_image"}, "html_url": "http://quantmind.github.io/giotto/examples/linetypes", "api_url": "http://quantmind.github.io/giotto/ng/examples/linetypes.json", "modified": "2014-12-07T18:19:29"}