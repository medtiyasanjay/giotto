{"name": "transitions", "description": "Transitions on a bar chart", "api_url": "http://giottojs.org/ng/examples/transitions.json", "date": "2014-12-24T00:00:00", "modified": "2014-12-24T09:24:18", "html_url": "http://giottojs.org/examples/transitions", "content_type": "text/html", "site": {"url": "http://giottojs.org", "name": "Lux", "date": "2014-12-24T10-39-55", "template_engine": null, "year": 2014, "media": "/media", "python_version": "3.4.2", "lux_version": "0.1.2-alpha.1", "template": "partials/examples.html"}, "author": ["Luca Sbardella"], "head": {"author": ["Luca Sbardella"], "title": "Transitions", "twitter:card": "summary_large_image", "description": "Transitions on a bar chart"}, "html": {"main": "<div id=\"page-main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-sm-12\" data-highlight>\n<div class=\"page-header\">\n<h2>Transitions</h2>\n</div>\n<div style=\"width: 100px\" class=\"center-block\"><lux-form data-options='luxforms.typeform_KIdBm'><script>if (!this.luxforms) {this.luxforms = {};} this.luxforms.typeform_KIdBm = {\"children\": [{\"children\": [{\"field\": {\"type\": \"select\", \"required\": true, \"name\": \"type\", \"options\": [\"svg\", \"canvas\"], \"value\": \"svg\"}}], \"field\": {\"type\": \"fieldset\"}}], \"field\": {\"showLabels\": false, \"model\": \"TypeForm\", \"type\": \"form\", \"id\": \"typeform_KIdBm\"}};</script></lux-form></div>\n\n<div data-options='gexamples.transition1' style='max-width: 500px' class=\"center-block\" giotto-chart></div>\n\n<p>Transitions are easily implemented using the <code>d3.transition</code> api. To enable transition on\na GiottoJS chart, set a positive <code>transition.duration</code> on a chart type.\nCurrently, transitions only work on <code>svg</code> elements.</p>\n<p>Html:</p>\n<pre><code>&lt;div data-options='gexamples.transition1' giotto-chart&gt;&lt;/div&gt;\n</code></pre>\n<h3>Javascript code</h3>\n<pre><code>gexamples.transition1 = {\n    height: '80%',\n\n    tooltip: {\n        show: true,\n    },\n\n    yaxis: {\n        min: 0,\n        max: 2,\n        show: false\n    },\n\n    bar: {\n        show: true,\n        fill: '#D79404',\n        lineWidth: 1,\n        transition: {\n            duration: 1000,\n            ease: 'linear'\n        }\n    },\n\n    data: function (chart) {\n        return [randomData(10, 1, 0.3)];\n    },\n\n    onInit: function (chart, opts) {\n\n        function animate () {\n            chart.each(function (serie) {\n                serie.data(randomData(10, 1, 0.3));\n            });\n            chart.resume();\n            d3.timer(animate, 2*opts.bar.transition.duration);\n            return true;\n        }\n\n        animate();\n    },\n\n    // Callback for angular directive\n    angular: function (chart, opts) {\n\n        function update (form) {\n            if (form.type) {\n                opts.type = form.type;\n                chart.resume();\n            }\n        }\n\n        opts.scope.$on('formReady', function (e, form) {\n            update(form);\n        });\n        opts.scope.$on('formFieldChange', function (e, form) {\n            update(form);\n        });\n    }\n};\n\nfunction randomData (N, \u00b5, \u03c3) {\n    // Create a random path\n    var data = [],\n        norm = d3.random.normal(\u00b5, \u03c3);\n    d3.range(0, N, 1).forEach(function (x) {\n        data.push([x, norm()]);\n    });\n    return data;\n}\n</code></pre>\n</div>\n</div>\n</div>\n</div>\n<script>\n\n    gexamples.transition1 = {\n        height: '80%',\n\n        tooltip: {\n            show: true,\n        },\n\n        yaxis: {\n            min: 0,\n            max: 2,\n            show: false\n        },\n\n        bar: {\n            show: true,\n            fill: '#D79404',\n            lineWidth: 1,\n            transition: {\n                duration: 1000,\n                ease: 'linear'\n            }\n        },\n\n        data: function (chart) {\n            return [randomData(10, 1, 0.3)];\n        },\n\n        onInit: function (chart, opts) {\n\n            function animate () {\n                chart.each(function (serie) {\n                    serie.data(randomData(10, 1, 0.3));\n                });\n                chart.resume();\n                d3.timer(animate, 2*opts.bar.transition.duration);\n                return true;\n            }\n\n            animate();\n        },\n\n        // Callback for angular directive\n        angular: function (chart, opts) {\n\n            function update (form) {\n                if (form.type) {\n                    opts.type = form.type;\n                    chart.resume();\n                }\n            }\n\n            opts.scope.$on('formReady', function (e, form) {\n                update(form);\n            });\n            opts.scope.$on('formFieldChange', function (e, form) {\n                update(form);\n            });\n        }\n    };\n\n    function randomData (N, \u00b5, \u03c3) {\n        // Create a random path\n        var data = [],\n            norm = d3.random.normal(\u00b5, \u03c3);\n        d3.range(0, N, 1).forEach(function (x) {\n            data.push([x, norm()]);\n        });\n        return data;\n    }\n</script>\n<div id=\"footer\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-sm-12 small\">\n<p>Library released under the <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD License</a>.</p>\n<p>Copyright 2014 <a href=\"http://lucasbardella.com\">Luca Sbardella</a> and <a href=\"http://quantmind.com\">Quantmind</a></p>\n</div>\n</div>\n</div>\n</div>\n"}, "image": "http://giottojs.org/examples/transitions.png", "title": "Transitions", "slug": "transitions"}